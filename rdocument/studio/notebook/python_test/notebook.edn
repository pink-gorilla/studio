; saved on 2022-06-01 06:34:33
{:content [{:out "",
            :id :b402313b-abdf-4b0b-9e5a-0515b85d2e3e,
            :code "(ns studio.notebook.python-test)",
            :ns "studio.notebook.python-test",
            :hiccup [:div.p-2.clj-nil [:p "nil"]]}
           {:out "",
            :id :223be9ba-b680-4fb4-aeea-7c4f83314af6,
            :code "^:R\n['studio.python-viz.python-doc/py-doc\n   {\"transpose\"\n    {:module \"numpy\"\n     :name \"transpose\"\n     :type :function\n     :flags #{:fn? :callable?}\n     :args []\n     :varkw \"kwargs\"\n     :varargs \"args\"\n     :kwonlyargs []\n     :arglists \"[[& [args {:as kwargs}]]]\"\n     :kwonlydefaults nil\n     :defaults nil\n     :str \"<function transpose at 0x7f939c0f84d0>\"\n     :annotations {}\n     :doc \"\\n    Permute the dimensions of an array.\\n\\n    Parameters\\n    ----------\\n    a : array_like\\n        Input array.\\n    axes : list of ints, optional\\n        By default, reverse the dimensions, otherwise permute the axes\\n        according to the values given.\\n\\n    Returns\\n    -------\\n    p : ndarray\\n        `a` with its axes permuted.  A view is returned whenever\\n        possible.\\n\\n    See Also\\n    --------\\n    moveaxis\\n    argsort\\n\\n    Notes\\n    -----\\n    Use `transpose(a, argsort(axes))` to invert the transposition of tensors\\n    when using the `axes` keyword argument.\\n\\n    Transposing a 1-D array returns an unchanged view of the original array.\\n\\n    Examples\\n    --------\\n    >>> x = np.arange(4).reshape((2,2))\\n    >>> x\\n    array([[0, 1],\\n           [2, 3]])\\n\\n    >>> np.transpose(x)\\n    array([[0, 2],\\n           [1, 3]])\\n\\n    >>> x = np.ones((1, 2, 3))\\n    >>> np.transpose(x, (1, 0, 2)).shape\\n    (2, 1, 3)\\n\\n    \"}}]",
            :ns "studio.notebook.python-test",
            :hiccup ^{:R true}
                    [studio.python-viz.python-doc/py-doc
                     {"transpose" {:args [],
                                   :varkw "kwargs",
                                   :name "transpose",
                                   :varargs "args",
                                   :type :function,
                                   :kwonlydefaults nil,
                                   :defaults nil,
                                   :module "numpy",
                                   :kwonlyargs [],
                                   :str "<function transpose at 0x7f939c0f84d0>",
                                   :annotations {},
                                   :arglists "[[& [args {:as kwargs}]]]",
                                   :flags #{:fn? :callable?},
                                   :doc "\n    Permute the dimensions of an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axes : list of ints, optional\n        By default, reverse the dimensions, otherwise permute the axes\n        according to the values given.\n\n    Returns\n    -------\n    p : ndarray\n        `a` with its axes permuted.  A view is returned whenever\n        possible.\n\n    See Also\n    --------\n    moveaxis\n    argsort\n\n    Notes\n    -----\n    Use `transpose(a, argsort(axes))` to invert the transposition of tensors\n    when using the `axes` keyword argument.\n\n    Transposing a 1-D array returns an unchanged view of the original array.\n\n    Examples\n    --------\n    >>> x = np.arange(4).reshape((2,2))\n    >>> x\n    array([[0, 1],\n           [2, 3]])\n\n    >>> np.transpose(x)\n    array([[0, 2],\n           [1, 3]])\n\n    >>> x = np.ones((1, 2, 3))\n    >>> np.transpose(x, (1, 0, 2)).shape\n    (2, 1, 3)\n\n    "}}]}],
 :meta {:id :2106f10e-040f-4693-afa4-b65edd6d74ec,
        :eval-time "2022-06-01 06:34:33",
        :ns "studio.notebook.python-test",
        :java "17.0.3",
        :clojure "1.10.3"}}
